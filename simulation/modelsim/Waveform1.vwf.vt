// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2023 15:08:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          statemachine_block
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module statemachine_block_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg sw0;
reg x;
reg y;
reg z;
// wires                                               
wire FF0;
wire FF1;
wire FF2;
wire FF3;
wire FF4;
wire FF5;
wire FF6;
wire FF7;
wire Lm;
wire Rm;

// assign statements (if any)                          
statemachine_block i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.FF0(FF0),
	.FF1(FF1),
	.FF2(FF2),
	.FF3(FF3),
	.FF4(FF4),
	.FF5(FF5),
	.FF6(FF6),
	.FF7(FF7),
	.Lm(Lm),
	.Rm(Rm),
	.sw0(sw0),
	.x(x),
	.y(y),
	.z(z)
);
initial 
begin 
#1000000 $stop;
end 

// CLK
initial
begin
	repeat(12)
	begin
		CLK = 1'b0;
		CLK = #40000 1'b1;
		# 40000;
	end
	CLK = 1'b0;
end 

// sw0
initial
begin
	sw0 = 1'b1;
	sw0 = #20000 1'b0;
	sw0 = #20000 1'b1;
end 

// x
initial
begin
	x = 1'b0;
	x = #320000 1'b1;
	x = #320000 1'b0;
	x = #320000 1'b1;
end 

// y
initial
begin
	repeat(3)
	begin
		y = 1'b0;
		y = #160000 1'b1;
		# 160000;
	end
	y = 1'b0;
end 

// z
initial
begin
	repeat(6)
	begin
		z = 1'b0;
		z = #80000 1'b1;
		# 80000;
	end
	z = 1'b0;
end 
endmodule

